description = 'Spring Integration Scala DSL'

apply plugin: 'base'
apply plugin: 'idea'

ext {
	linkHomepage = 'https://github.com/SpringSource/spring-integration-scala'
	linkCi       = 'https://build.springsource.org/browse/INT-SCALADSL'
	linkIssue    = 'https://jira.springsource.org/browse/INTSCALA'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-dsl-scala'
	linkScmConnection    = 'git://github.com/SpringSource/spring-integration-dsl-scala.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-dsl-scala.git'
}

allprojects {
	group = 'org.springframework.integration'

	repositories {
		maven { url 'http://repo.springsource.org/libs-milestone' }
	}
}

subprojects { subproject ->

	apply plugin: 'scala'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		junitVersion = '4.11'
		log4jVersion = '1.2.17'
		mockitoVersion = '1.9.5'
		springintegrationVersion = '2.2.4.RELEASE'
		springGemfireVersion = '1.3.0.RELEASE'
	}

	dependencies {
		// Libraries needed for scala api
		compile 'org.scala-lang:scala-library:2.10.2'

		compile 'org.scala-lang:scala-compiler:2.10.2'
		compile 'org.scala-lang:scala-library:2.10.2'

		testCompile "junit:junit-dep:$junitVersion"
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile 'com.novocode:junit-interface:0.9'
	}

	compileScala {
		compileScala.scalaCompileOptions.additionalParameters= ['-feature']
		compileScala.scalaCompileOptions.additionalParameters= ['-language:existentials']
	}

	compileTestScala {
		compileTestScala.scalaCompileOptions.additionalParameters= ['-feature']
		compileTestScala.scalaCompileOptions.additionalParameters= ['-language:reflectiveCalls']
	}

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
	}

	task sourcesJar(type: Jar, dependsOn: scaladoc) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task scaladocJar(type: Jar) {
		classifier = 'scaladoc'
		from scaladoc
	}

	artifacts {
		archives sourcesJar
		archives scaladocJar
	}

}

project('spring-integration-dsl-scala-core') {
	description = 'Spring Integration Scala Core'
	dependencies {
		// dependent libraries
		compile "org.springframework.integration:spring-integration-core:$springintegrationVersion"
		compile("org.codehaus.jackson:jackson-mapper-asl:1.9.12", optional)
	}
}

project('spring-integration-dsl-scala-jms') {
	description = 'Spring Integration Scala JMS'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-jms:$springintegrationVersion"
		compile ("org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1")

		// libraries only needed for test
		testCompile ("org.apache.activemq:activemq-core:5.3.0") {
			exclude group: 'org.springframework', module: 'spring-context'
		}
	}
}

project('spring-integration-dsl-scala-gemfire') {
		description = 'Spring Integration Scala GemFire'
		test {
			forkEvery = 1
			systemProperties['gemfire.disableShutdownHook'] = 'true'
		}
		dependencies {
			compile project(":spring-integration-dsl-scala-core")
			compile "org.springframework.integration:spring-integration-gemfire:$springintegrationVersion"
		}
}

project('spring-integration-dsl-scala-http') {
	description = 'Spring Integration Scala HTTP'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-http:$springintegrationVersion"
	}
}

project('spring-integration-dsl-scala-file') {
	description = 'Spring Integration Scala File'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-file:$springintegrationVersion"
	}
}

project('spring-integration-dsl-scala-jdbc') {
	description = 'Spring Integration Scala Jdbc'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-jdbc:$springintegrationVersion"

		// libraries only needed for test
		testCompile "commons-dbcp:commons-dbcp:1.4"
		testCompile "org.apache.derby:derby:10.9.1.0"
	}
}

project('spring-integration-dsl-scala-ftp') {
	description = 'Spring Integration Scala FTP'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-ftp:$springintegrationVersion"
	}
}

project('spring-integration-dsl-scala-sftp') {
	description = 'Spring Integration Scala SFTP'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile "org.springframework.integration:spring-integration-sftp:$springintegrationVersion"
	}
}

project('spring-integration-dsl-scala-integration-demos') {
	description = 'Spring Integration Scala Integration Demos'
	dependencies {
		compile project(":spring-integration-dsl-scala-core")
		compile project(":spring-integration-dsl-scala-jms")
		compile project(":spring-integration-dsl-scala-gemfire")
		compile project(":spring-integration-dsl-scala-file")
		compile project(":spring-integration-dsl-scala-jdbc")
		compile project(":spring-integration-dsl-scala-http")
		compile ("org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1")

		// libraries only needed for test
		testCompile ("org.apache.activemq:activemq-core:5.7.0") {
			 exclude group: 'org.springframework', module: 'spring-context'
		}
	}
}

task scaladoc(type: org.gradle.api.tasks.scala.ScalaDoc) {
	group = 'Documentation'
	description = 'Generates aggregated ScalaDoc API documentation.'
	title = "${rootProject.description} ${version} API"
	source subprojects.collect { project ->
		project.sourceSets.main.allScala
	}
	destinationDir = new File(buildDir, "api")
	scalaClasspath = files(subprojects.collect { project ->
		project.sourceSets.main.allScala
	})
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.allJava
	})
}

task api(type: ScalaDoc) {
	group = 'Documentation'
	description = 'Generates aggregated Scaladoc API documentation.'
	title = "${rootProject.description} ${version} API"

	source subprojects.collect { project ->
		project.sourceSets.main.allScala
	}

	destinationDir = new File(buildDir, "api")

	scalaClasspath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})

	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing the api " +
		"for deployment at static.springframework.org/spring-integration-dsl-scala/docs."

	from (api) {
		into 'api'
	}

}

task distZip(type: Zip, dependsOn: [docsZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.scaladocJar
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist and -docs distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}

